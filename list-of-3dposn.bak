#lang htdp/isl+
;; Design and implement a program that converts a given list if three-dimensional coordinates represented using a string of numbers to a
;; list of three-dimentional coordinates represented using structures

;; A 3dposn is a structure: (make-3dposn x y z)
(define-struct 3dposn (x y z))

;; sample instances of 3dposn
(define 3DPOSN1 (make-3dposn 1 2 3))
(define 3DPOSN2 (make-3dposn 2 4 6))

;; A list of 3dposn (lo3d) is either:
;; 1. '()
;; 2. (cons 3dposn lo3d)

;; sample instances of lo3d
(define LO3D1 '(3DPOSN1 3DPOSN2))
(define LO3D2 '((make-3dposn (5 6 7)) (make-3dposn (1 9 4))))

;; A list of number (lon) is either:
;;  1. '()
;;  2. (cons number lon)

;; sample instances of lon
(define LON1 '(1 2 3 4 5 6 7 8 9))
(define LON2 '(2 3 4 4 5 6 7 6 4 3))
(define LON3 '(2 4 5 5 2 5 6 7 5 5 2))


;; lon -> lo3d
;; Purpose: To convert a given list of 3dposn coordinates represented using
;;          numbers to a list of 3dposn coordinates represented using structures
;; How: If the length of the given lon is less than 3, then it returns an empty list. Otherwise a 3dposn is created
;;      using the first, second, and third of the given lon. Then the functinon cons's the 3dposn to the rest of the
;;      processed list, thus making the lon shorter each time the list is recursively processed. This will result in
;;      the list's length eventually becoming less than three.
(define (lon->lo3d a-lon)
  (if (< (length a-lon) 3)
      '()
      (local [;; lon -> 3dposn
              ;; Purpose: To make a 3dposn using the given lon
              (define (mk-3dposn a-lon)
                (make-3dposn (first a-lon) (second a-lon) (third a-lon)))

              ;; lon -> lon
              ;; Purpose: Make a new lon from the 4th number on from a given lon
              (define (rest-for-lo3d a-lon)
                (rest (rest (rest a-lon))))]
        
        (cons (mk-3dposn a-lon) (lon->lo3d (rest-for-lo3d a-lon))))))

;; sample expressions for lon->lo3d
(define SAMP-LON->LO3D1 (if (< (length LON1) 3)
                            '()
                            (local [;; lon -> 3dposn
                                    ;; Purpose: To make a 3dposn using the given lon
                                    (define (mk-3dposn a-lon)
                                      (make-3dposn (first a-lon) (second a-lon) (third a-lon)))

                                    ;; lon -> lon
                                    ;; Purpose: Make a new lon from the 4th number on from a given lon
                                    (define (rest-for-lo3d a-lon)
                                      (rest (rest (rest a-lon))))]
        
                              (cons (mk-3dposn LON1) (lon->lo3d (rest-for-lo3d LON1))))))

(define SAMP-LON->LO3D2 (if (< (length LON2) 3)
                            '()
                            (local [;; lon -> 3dposn
                                    ;; Purpose: To make a 3dposn using the given lon
                                    (define (mk-3dposn a-lon)
                                      (make-3dposn (first a-lon) (second a-lon) (third a-lon)))

                                    ;; lon -> lon
                                    ;; Purpose: Make a new lon from the 4th number on from a given lon
                                    (define (rest-for-lo3d a-lon)
                                      (rest (rest (rest a-lon))))]
        
                              (cons (mk-3dposn LON2) (lon->lo3d (rest-for-lo3d LON2))))))

(define SAMP-LON->LO3D3 (if (< (length LON3) 3)
                            '()
                            (local [;; lon -> 3dposn
                                    ;; Purpose: To make a 3dposn using the given lon
                                    (define (mk-3dposn a-lon)
                                      (make-3dposn (first a-lon) (second a-lon) (third a-lon)))

                                    ;; lon -> lon
                                    ;; Purpose: Make a new lon from the 4th number on from a given lon
                                    (define (rest-for-lo3d a-lon)
                                      (rest (rest (rest a-lon))))]
        
                              (cons (mk-3dposn LON3) (lon->lo3d (rest-for-lo3d LON3))))))

;;tests using sample computations
(check-expect (lon->lo3d LON1) SAMP-LON->LO3D1)
(check-expect (lon->lo3d LON2) SAMP-LON->LO3D2)
(check-expect (lon->lo3d LON3) SAMP-LON->LO3D3)

;;tests using sample values
(check-expect (lon->lo3d (list 1 5 2 0 8 8 1 4 8 9)) (list (make-3dposn 1 5 2) (make-3dposn 0 8 8) (make-3dposn 1 4 8)))
(check-expect (lon->lo3d (list 2 5 32 59 2 8 2)) (list (make-3dposn 2 5 32) (make-3dposn 59 2 8)))
(check-expect (lon->lo3d (list 2 5 32 59  2 9 10 7 90 2 7 2 8 2))
              (list (make-3dposn 2 5 32) (make-3dposn 59 2 9) (make-3dposn 10 7 90) (make-3dposn 2 7 2)))




