#lang htdp/asl

#|
A bank may have several branches. Each branch is a bank that may
be represented as a list of clients. Design and implement an interface for
banks that offers one service: adding an account. Define several branches
and add several accounts to each. Make sure that client names are repeated
among the branches, and make sure that your tests illustrate that
changes to one branch do not affect a different branch.
|#

#|

A bank is a (listof client)

A bank account is a structure, (make-account number client),
with  a balance and an owner.

A bank client is a structure, (make-client string (listof account)),
with a name and a list of accounts.

|#

(define-struct account (balance owner))

(define-struct client (name accounts))

;; (listof client)
;; Purpose: Store the clients of a bank
;; Assumption: Every client has a unique name
(define bank (void))

;;  --> (void)
;; Purpose: Initialize bank
(define (initialize-bank!)
  (set! bank '()))

;;  --> (listof (cons string (listof number)))
;; Purpose: Tranform bank information into a list
(define (bank->list)
  (map (λ (client)
         (cons (client-name client)
               (map (λ (acct) (account-balance acct))
                    (client-accounts client))))
       bank))



;; build-new-client before encapslation

;; string number --> client
;; Purpose: To build a new client with given name and a single new 
;;          account that has the given balance
;; Assumption: The given initial balance is positive
(define (build-new-client name init-balance)
  (local [(define new-client (make-client name '()))]
    (begin
      (set-client-accounts! new-client (list (make-account init-balance new-client)))
      new-client)))

;; Sample expressions for build-new-client
(define HOPPER (local [(define new-client (make-client "Grace Hopper" '()))]
                 (begin
                   (set-client-accounts! new-client
                                         (list (make-account 847 new-client)))
                   new-client)))

(define RHODES  (local [(define new-client (make-client "Ida Rhodes" '()))]
                  (begin
                    (set-client-accounts! new-client
                                          (list (make-account 1301 new-client)))
                    new-client)))

;; Tests using sample computations for build-new-client
(check-expect (build-new-client "Grace Hopper" 847)  HOPPER)
(check-expect (build-new-client "Ida Rhodes"   1301) RHODES)

;;  Tests using sample values for build-new-client
(check-expect (build-new-client "Ada Lovelace" 1000)
              (shared ((-0- (make-client "Ada Lovelace"
                                         (list (make-account 1000 -0-)))))
                -0-))

(check-expect (build-new-client "Mary Kenneth Keller" 431)
              (shared ((-0- (make-client "Mary Kenneth Keller"
                                         (list (make-account 431 -0-)))))
                -0-))



;; -> branch
;;Purpose: To construct a branch
(define (make-branch)
  (local [;;loc
          ;;Purpose: to store the value of a-loc
          (define loc (void))

          ;;loc -> (void)
          ;;Purpose: to reset a loc to empty
          (define (init!)
            (set! loc '()))
          
          ;; string number --> (void)
          ;; Purpose: Add an account for the given client name with the given
          ;;          initial balance
          ;; Effect: A new client, if necessary, is added to the front of bank
          ;;         and a new account is added to the front of the client's
          ;;         accounts
          ;; Assumption: The given balance is positive
          (define (add-account! name balance)
            (local [(define client-search (filter
                                           (λ (c) (string=? name (client-name c)))
                                           bank))

                    ;;  --> client
                    ;; Purpose: To build a new client with name and a single new 
                    ;;          account that has init-balance
                    (define (build-new-client)
                      (local [(define new-client (make-client name '()))]
                        (begin
                          (set-client-accounts! new-client (list (make-account balance new-client)))
                          new-client)))]
              (if (not (empty? client-search))
                  (local [(define the-client (first client-search))
                          (define new-acct (make-account balance the-client))]
                    (set-client-accounts! the-client (cons new-acct (client-accounts the-client))))
                  (set! loc (cons (build-new-client) loc)))))

          ; Message -> branch
          ; Purpose: to manage a-loc
          (define (branch-object a-message)
            (cond [(eq? a-message 'add-account) add-account!]
                  [(eq? a-message 'clients) loc]
                  [(eq? a-message 'initialize) init!]
                  [else (error 'branch-object
                               (format "Unknown message received: ~s"
                                       a-message))]))]
    branch-object))
              


;; Sample branches
(define BRANCH1 (make-branch))
(define BRANCH2 (make-branch))
(define BRANCH3 (make-branch))

;; branch -> loc
;; Purpose: to get the clients in a branch
(define (get-branch branch) (branch 'clients))


;; branch -> loc
;; Purpose: to initialize a branch
(define (init-branch branch) ((branch 'initialize)))

;;branch -> loc
;; Purpose: to add an account to a branch
(define (branch-account name balance branch) ((branch 'add-account) name balance))

;;TEST
;;As you can see, the accounts made using the same name, do not affect other accounts
;;in other branches. This means, that our tests illustrate that changes to one
;;branch do not affect a different branch.
(check-expect (begin (initialize-bank!)
                     (init-branch BRANCH1)
                     (init-branch BRANCH2)
                     (init-branch BRANCH3)
                     (branch-account "James" 500 BRANCH1)
                     (branch-account "James" 200 BRANCH2)
                     (branch-account "James" 800 BRANCH3)
                     (branch-account "Wyatt" 300 BRANCH1)
                     (branch-account "Wyatt" 2500 BRANCH2)
                     (branch-account "Wyatt" 50 BRANCH3)
                     (branch-account "Sophia" 5000 BRANCH1)
                     (branch-account "Sophia" 524 BRANCH2)
                     (branch-account "Sophia" 861 BRANCH3)
                     (get-branch BRANCH1))
              (shared ((-1- (make-client "Sophia" (list (make-account 5000 -1-))))
                       (-11- (make-client "James" (list (make-account 500 -11-))))
                       (-6- (make-client "Wyatt" (list (make-account 300 -6-))))) (list -1- -6- -11-)))

(check-expect (begin (initialize-bank!)
                     (init-branch BRANCH1)
                     (init-branch BRANCH2)
                     (init-branch BRANCH3)
                     (branch-account "James" 500 BRANCH1)
                     (branch-account "James" 200 BRANCH2)
                     (branch-account "James" 800 BRANCH3)
                     (branch-account "Wyatt" 300 BRANCH1)
                     (branch-account "Wyatt" 2500 BRANCH2)
                     (branch-account "Wyatt" 50 BRANCH3)
                     (branch-account "Sophia" 5000 BRANCH1)
                     (branch-account "Sophia" 524 BRANCH2)
                     (branch-account "Sophia" 861 BRANCH3)
                     (get-branch BRANCH2))
              (shared ((-1- (make-client "Sophia" (list (make-account 524 -1-))))
                       (-11- (make-client "James" (list (make-account 200 -11-))))
                       (-6- (make-client "Wyatt" (list (make-account 2500 -6-))))) (list -1- -6- -11-)))

(check-expect (begin (initialize-bank!)
                     (init-branch BRANCH1)
                     (init-branch BRANCH2)
                     (init-branch BRANCH3)
                     (branch-account "James" 500 BRANCH1)
                     (branch-account "James" 200 BRANCH2)
                     (branch-account "James" 800 BRANCH3)
                     (branch-account "Wyatt" 300 BRANCH1)
                     (branch-account "Wyatt" 2500 BRANCH2)
                     (branch-account "Wyatt" 50 BRANCH3)
                     (branch-account "Sophia" 5000 BRANCH1)
                     (branch-account "Sophia" 524 BRANCH2)
                     (branch-account "Sophia" 861 BRANCH3)
                     (get-branch BRANCH3))
              (shared ((-1- (make-client "Sophia" (list (make-account 861 -1-))))
                       (-11- (make-client "James" (list (make-account 800 -11-))))
                       (-6- (make-client "Wyatt" (list (make-account 50 -6-))))) (list -1- -6- -11-)))