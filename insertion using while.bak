#lang htdp/asl

(require while)
;; A (vectorof integers) (voi) is either:
(define VEC1 (vector 1 10 2 3 4 6))
(define VEC2 (vector 2 3 1 6 99 100 123 243 1 -43 10 1992))
(define VEC3 (vector))


;; -> (void)
;; Purpose: To sort a given vector in non-decreasing order
(define (insertion-sort! a-voi)
  (if (< (vector-length a-voi) 2)
      (void)
      (local [(define low (void))
              (define high (void))

              ;; -> (void)
              ;; Purpose: To sort the vector in non-decreasing order
              ;; INVARIANT:
              ;; 
              (define (insert-sort!)
                (local [(define low-val (void))
                        (define cur-idx (void))

                        ;; -> (void)
                        ;; Purpose: To sort the low and sub1 low vector-ref value in non-decreasing order
                        ;; INV:
                        ;; (> (vector-length a-voi) 1) AND (< high low)
                        (define (insert-sort-helper!)
                          (local [;; -> (void)
                                      ;; Purpose: To sort a number with the numbers before it in the vector in non-decreasing order
                                      ;; INVARIANT:
                                      ;; high = (sub1 (vector-length a-voi)) AND 2 <= low <= high 1 AND
                                      ;;(> (vector-ref a-voi cur-idx) (vector-ref a-voi (sub1 cur-idx)))
                                      ;; AND curr-idx-val = (vector-ref a-voi (add1 cur-idx))
                                      (define (last-help!)
                                        (local [(define curr-idx-val (void))]

                                          (while (and (> low 1)
                                                      (> cur-idx 0)
                                                      (< (vector-ref a-voi cur-idx) (vector-ref a-voi (sub1 cur-idx))))

                                            ;; high = (sub1 (vector-length a-voi)) AND 2 <= low <= high AND cur-idx >= 1 AND
                                                ;;(< (vector-ref a-voi cur-idx) (vector-ref a-voi (sub1 cur-idx)))
                                                ;; AND curr-idx-val = (vector-ref a-voi (add1 cur-idx))
                                              
                                                (set! curr-idx-val (vector-ref a-voi cur-idx))
                                              
                                                ;; high = (sub1 (vector-length a-voi)) AND 2 <= low <= high AND cur-idx >= 1 AND
                                                ;;(< (vector-ref a-voi cur-idx) (vector-ref a-voi (sub1 cur-idx)))
                                                ;; AND curr-idx-val = (vector-ref a-voi cur-idx)
                                              
                                                (vector-set! a-voi cur-idx (vector-ref a-voi (sub1 cur-idx)))
                                              
                                                ;; high = (sub1 (vector-length a-voi)) AND 2 <= low <= high AND cur-idx >= 1 AND
                                                ;;(= (vector-ref a-voi cur-idx) (vector-ref a-voi (sub1 cur-idx)))
                                                ;; AND curr-idx-val = (vector-ref a-voi cur-idx)
                                              
                                                (vector-set! a-voi (sub1 cur-idx) curr-idx-val)
                                              
                                                ;; high = (sub1 (vector-length a-voi)) AND 2 <= low <= high AND cur-idx >= 1 AND
                                                ;;(> (vector-ref a-voi cur-idx) (vector-ref a-voi (sub1 cur-idx)))
                                                ;; AND curr-idx-val = (vector-ref a-voi cur-idx)
                                              
                                                (set! cur-idx (sub1 cur-idx))

                                                ;; high = (sub1 (vector-length a-voi)) AND 2 <= low <= high AND cur-idx >= 0 AND
                                                ;;(> (vector-ref a-voi cur-idx) (vector-ref a-voi (sub1 cur-idx)))
                                                ;; AND curr-idx-val = (vector-ref a-voi cur-idx)
                                           )))]

                            (while (and (> low 0)
                                        (< (vector-ref a-voi low) (vector-ref a-voi (sub1 low))))
                                  ;; (> (vector-length a-voi) 1) AND (< high low) AND (> low 0)
                                  ;; AND (< (vector-ref a-voi low) (vector-ref a-voi (sub1 low)))
                                  (set! low-val (vector-ref a-voi low))
                                  ;; (> (vector-length a-voi) 1) AND (< high low) AND (> low 0)
                                  ;; AND (< (vector-ref a-voi low) (vector-ref a-voi (sub1 low)))
                                  (vector-set! a-voi low (vector-ref a-voi (sub1 low)))
                                  ;; (> (vector-length a-voi) 1) AND (< high low) AND (> low 0)
                                  ;; AND (= (vector-ref a-voi low) (vector-ref a-voi (sub1 low)))
                                  (vector-set! a-voi (sub1 low) low-val)
                                  ;; (> (vector-length a-voi) 1) AND (< high low) AND (> low 0)
                                  ;; AND (> (vector-ref a-voi low) (vector-ref a-voi (sub1 low)))
                                  (set! cur-idx (sub1 low))
                                  ;; (> (vector-length a-voi) 1) AND (< high low) AND (> low 0)
                                  ;; AND (< (vector-ref a-voi low) (vector-ref a-voi (sub1 low)))
                                  (last-help!))))]
                  
                  (while (<= low high)
                         (insert-sort-helper!)
                         (set! low (add1 low)))))]
        (begin
          (set! high (sub1 (vector-length a-voi)))
          (set! low 0)
          (insert-sort!)
          #|
low > high
voi is sorted in non-decreasing order
|#))))
                              
